<script>
  // let canvas = document.createElement("canvas");
  let canvas = document.getElementById("canvas") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d")!;

  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  canvas.style.background = "#1e1e1e";

  const getAcceptableBounds = () => {
    const acceptableBounds = {
      x: {
        min: 0 - canvas.width * factor,
        max: canvas.width + canvas.width * factor,
      },
      y: {
        min: 0 - canvas.height * factor,
        max: canvas.height + canvas.height * factor,
      },
    };
    return {
      acceptableBounds,
      RESPAWN_X_RANGE: [acceptableBounds.x.min, acceptableBounds.x.max * 0.75],
      RESPAWN_Y_RANGE: [acceptableBounds.y.min, acceptableBounds.y.max * 0.75],
    };
  };

  const factor = 0.1;
  let { acceptableBounds, RESPAWN_X_RANGE, RESPAWN_Y_RANGE } =
    getAcceptableBounds();

  let _debounce: any = null;
  window.addEventListener("resize", () => {
    _debounce && clearTimeout(_debounce);
    _debounce = setTimeout(() => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      ({ acceptableBounds, RESPAWN_X_RANGE, RESPAWN_Y_RANGE } =
        getAcceptableBounds());
    }, 100);
  });

  const NUMBER_POINTS = 50;
  const SIZE_RANGE = [1, 2];
  const VELOCITY_RANGE = [2, 4];
  const SATURATION_RANGE = [40, 80];
  const LIGHTNESS_RANGE = [50, 60];
  const SLOPE = 0.5;

  let currentFrame = 0;

  const randomPointOffscreen = () => {
    // x.min -> (x.max * 0.75)
    // y.min -> (y.max * 0.5)
    // either x or y must be less than 0
    let x,
      y,
      max = 10,
      count = 0;

    do {
      x = randomValueFromRange(RESPAWN_X_RANGE);
      y = randomValueFromRange(RESPAWN_Y_RANGE);
    } while (x > 0 && y > 0 && count++ < max);

    return { x, y };
  };

  const randomPointWithinAcceptableBounds = () => {
    const x =
      Math.floor(
        Math.random() * (acceptableBounds.x.max - acceptableBounds.x.min + 1)
      ) + acceptableBounds.x.min;
    const y =
      Math.floor(
        Math.random() * (acceptableBounds.y.max - acceptableBounds.y.min + 1)
      ) + acceptableBounds.y.min;

    return { x, y };
  };

  const isOutOfBounds = (point) => {
    return (
      point.x < acceptableBounds.x.min ||
      point.x > acceptableBounds.x.max ||
      point.y < acceptableBounds.y.min ||
      point.y > acceptableBounds.y.max
    );
  };

  const randomValueFromRange = (range: [number, number]) =>
    Math.random() * (range[1] - range[0] + 1) + range[0];

  const randomSize = () => randomValueFromRange(SIZE_RANGE);
  const randomVelocity = () => randomValueFromRange(VELOCITY_RANGE);

  const randomColor = () => {
    const h = Math.floor(Math.random() * 360);
    const s = randomValueFromRange(SATURATION_RANGE);
    const l = randomValueFromRange(LIGHTNESS_RANGE);
    return `hsl(${h}, ${s}%, ${l}%)`;
  };

  const point = () => {
    let starting = randomPointWithinAcceptableBounds();
    let current = { ...starting };
    let size = randomSize();
    let color = randomColor();
    let velocity = randomVelocity();
    const TRAIL_LENGTH = 10;

    return {
      render() {
        const point = this;
        ctx.beginPath();
        ctx.arc(current.x, current.y, size, 0, 2 * Math.PI);
        ctx.fillStyle = color;
        ctx.fill();
      },
      update() {
        current.x += velocity * Math.cos(SLOPE);
        current.y += velocity * Math.sin(SLOPE);

        if (isOutOfBounds(current)) {
          starting = randomPointOffscreen();
          current = { ...starting };
          // velocity = 0;
        }
      },
    };
  };

  const points = Array(NUMBER_POINTS)
    .fill(0)
    .map(() => point());

  const render = () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "#1e1e1e";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    points.forEach((point) => {
      point.update();
      point.render();
    });
    currentFrame = window.requestAnimationFrame(render);
  };

  currentFrame = requestAnimationFrame(render);
</script>

<div class="fixed left-0 top-0">
  <canvas id="canvas"></canvas>
</div>
